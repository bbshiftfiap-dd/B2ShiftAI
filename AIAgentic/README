# ü§ñ AI Agentic System - B2Shift

Sistema de IA Multi-Agent baseado no Google Agent Development Kit (ADK) para an√°lise inteligente de clusteriza√ß√£o de clientes B2B.

## üéØ Vis√£o Geral

O AI Agentic System √© o cora√ß√£o inteligente da plataforma B2Shift, implementando uma arquitetura multi-agent sofisticada que combina:

- **üß† Intelig√™ncia Distribu√≠da**: Agentes especializados trabalhando em conjunto
- **üîÑ Orquestra√ß√£o Inteligente**: Coordena√ß√£o autom√°tica de workflows complexos
- **üìä An√°lise Avan√ßada**: Machine Learning integrado com reasoning de IA
- **üéØ Decis√µes Estrat√©gicas**: Gera√ß√£o autom√°tica de estrat√©gias de neg√≥cio

## üèóÔ∏è Arquitetura Multi-Agent

```mermaid
graph TB
    subgraph "User Interface"
        A[Natural Language Query] --> B[Root Agent]
    end
    
    subgraph "Orchestration Layer"
        B[B2Shift Root Agent<br/>Gemini 1.5 Pro] --> C[Intent Classification]
        C --> D[Workflow Selection]
        D --> E[Sub-Agent Coordination]
    end
    
    subgraph "Specialized Agents"
        E --> F[Data Agent<br/>Gemini 1.5 Flash]
        E --> G[Cluster Agent<br/>Gemini 1.5 Flash] 
        E --> H[Decision Agent<br/>Gemini 1.5 Pro]
    end
    
    subgraph "Execution Layer"
        F --> I[Data Processing<br/>Python + BigQuery]
        G --> J[ML Algorithms<br/>Scikit-learn + Custom]
        H --> K[Strategy Generation<br/>Business Rules Engine]
    end
    
    subgraph "Output Layer"
        I --> L[Consolidated Results]
        J --> L
        K --> L
        L --> M[Executive Report]
        L --> N[Actionable Insights]
        L --> O[ROI Projections]
    end
```

## üß© Componentes dos Agentes

### üéØ B2Shift Root Agent

**Modelo**: Gemini 1.5 Pro  
**Responsabilidade**: Orquestra√ß√£o e Decis√µes Estrat√©gicas

#### Funcionalidades Principais
- **Interpreta√ß√£o de Linguagem Natural**: Processa queries complexas dos usu√°rios
- **Coordena√ß√£o de Workflow**: Orquestra execu√ß√£o de sub-agentes
- **Consolida√ß√£o de Resultados**: Integra outputs de m√∫ltiplas fontes
- **Gera√ß√£o de Insights Executivos**: Produz relat√≥rios de alto n√≠vel

#### Exemplo de Intera√ß√£o
```python
query = """
Analise nossos clientes B2B e identifique os 5 principais clusters.
Para cada cluster, gere estrat√©gias espec√≠ficas de go-to-market
com proje√ß√µes de ROI para os pr√≥ximos 12 meses.
"""

response = await root_agent.process_query(query)
```

### üìä Data Agent

**Modelo**: Gemini 1.5 Flash  
**Responsabilidade**: Prepara√ß√£o e An√°lise de Dados

#### Capacidades T√©cnicas
```python
class DataAgent:
    async def extract_customer_data(self, filters: Dict) -> DataFrame:
        """Extrai dados do BigQuery com filtros espec√≠ficos"""
        
    async def validate_data_quality(self, data: DataFrame) -> QualityReport:
        """Executa valida√ß√µes de qualidade autom√°ticas"""
        
    async def engineer_features(self, raw_data: DataFrame) -> DataFrame:
        """Cria features espec√≠ficas para an√°lise B2B"""
        
    async def prepare_for_clustering(self, data: DataFrame) -> ClusterData:
        """Normaliza e prepara dados para algoritmos ML"""
```

#### Pipeline de Processamento
1. **Extra√ß√£o**: BigQuery, CRM APIs, Data Lake
2. **Valida√ß√£o**: Missing values, outliers, consistency
3. **Feature Engineering**: RFM, behavioral features, business metrics
4. **Normalization**: StandardScaler, robust scaling

### üî¨ Cluster Agent

**Modelo**: Gemini 1.5 Flash  
**Responsabilidade**: Algoritmos de Clusteriza√ß√£o e An√°lise ML

#### Algoritmos Implementados

##### K-Means Adaptativo
```python
async def adaptive_kmeans(self, data: np.ndarray, max_clusters: int = 10):
    """
    K-Means com determina√ß√£o autom√°tica do n√∫mero ideal de clusters
    usando Elbow Method + Silhouette Analysis
    """
    best_k = self._find_optimal_clusters(data, max_clusters)
    kmeans = KMeans(n_clusters=best_k, random_state=42, n_init='auto')
    return kmeans.fit(data)
```

##### DBSCAN para Outliers
```python
async def dbscan_analysis(self, data: np.ndarray):
    """
    DBSCAN para identifica√ß√£o de outliers e clusters de densidade
    Otimizado para dados B2B com ru√≠do
    """
    eps = self._estimate_eps(data)
    min_samples = max(int(len(data) * 0.01), 5)
    return DBSCAN(eps=eps, min_samples=min_samples).fit(data)
```

##### Clustering Hier√°rquico
```python
async def hierarchical_clustering(self, data: np.ndarray):
    """
    Clustering hier√°rquico para an√°lise de sub-segmentos
    Com dendrogramas interativos
    """
    linkage_matrix = linkage(data, method='ward')
    return AgglomerativeClustering(
        n_clusters=self._find_optimal_hierarchy(linkage_matrix)
    ).fit(data)
```

#### M√©tricas de Valida√ß√£o

| M√©trica | F√≥rmula | Interpreta√ß√£o |
|---------|---------|---------------|
| **Silhouette Score** | `s = (b - a) / max(a, b)` | [-1, 1]: Maior = Melhor |
| **Davies-Bouldin** | `DB = (1/n) * Œ£ max((œÉi + œÉj)/d(ci,cj))` | [0, ‚àû): Menor = Melhor |
| **Calinski-Harabasz** | `CH = (BSS/(k-1)) / (WSS/(n-k))` | [0, ‚àû): Maior = Melhor |

### üéØ Decision Agent

**Modelo**: Gemini 1.5 Pro  
**Responsabilidade**: Estrat√©gias de Neg√≥cio e ROI

#### Framework de Decis√£o

```python
class DecisionAgent:
    async def analyze_cluster_business_potential(self, cluster: ClusterProfile):
        """
        Analisa potencial de neg√≥cio considerando:
        - Revenue atual e projetado
        - Customer lifetime value
        - Propens√£o a churn
        - Oportunidades de cross-sell/upsell
        """
        
    async def generate_gtm_strategy(self, cluster: ClusterProfile):
        """
        Gera estrat√©gia go-to-market personalizada:
        - Positioning e messaging
        - Canais de aquisi√ß√£o
        - Pricing strategy  
        - Content marketing approach
        """
        
    async def calculate_roi_projections(self, strategy: GTMStrategy):
        """
        Projeta ROI considerando:
        - Investment required
        - Timeline de implementa√ß√£o
        - Conversion rates esperadas
        - Revenue projections
        """
```

#### Tipos de Estrat√©gias Geradas

##### Enterprise Customers (Cluster 1)
```yaml
profile:
  size: "Large enterprises (500+ employees)"
  revenue: "$1M+ ARR"
  characteristics: "Complex needs, long sales cycles"
  
strategy:
  approach: "Consultative selling, custom solutions"
  channels: "Direct sales, partner channel"
  pricing: "Value-based pricing, annual contracts"
  content: "ROI calculators, case studies, whitepapers"
  
roi_projection:
  investment: "$500K"
  timeline: "12-18 months"
  expected_revenue: "$2.5M"
  net_roi: "400%"
```

##### SMB Tech Companies (Cluster 2)  
```yaml
profile:
  size: "50-500 employees"
  revenue: "$100K-1M ARR" 
  characteristics: "Tech-savvy, price-sensitive"
  
strategy:
  approach: "Product-led growth, self-serve + sales"
  channels: "Digital marketing, inside sales"
  pricing: "Freemium model, monthly subscriptions"
  content: "Product demos, tutorials, community"
  
roi_projection:
  investment: "$200K"
  timeline: "6-9 months"
  expected_revenue: "$800K"
  net_roi: "300%"
```

## üîÑ Workflows de Execu√ß√£o

### Workflow 1: An√°lise Completa de Clusteriza√ß√£o

```mermaid
sequenceDiagram
    participant U as User
    participant R as Root Agent
    participant D as Data Agent
    participant C as Cluster Agent
    participant Dec as Decision Agent
    
    U->>R: "Analyze customers and create strategies"
    R->>D: Extract and prepare customer data
    D->>D: Data quality validation
    D->>D: Feature engineering
    D-->>R: Clean dataset ready
    
    R->>C: Run clustering algorithms
    C->>C: K-Means analysis
    C->>C: DBSCAN outlier detection
    C->>C: Cluster validation
    C-->>R: Cluster profiles identified
    
    R->>Dec: Generate business strategies
    Dec->>Dec: Analyze cluster potential
    Dec->>Dec: Create GTM strategies
    Dec->>Dec: Calculate ROI projections
    Dec-->>R: Strategic recommendations
    
    R->>R: Consolidate all results
    R-->>U: Executive report with insights
```

### Workflow 2: An√°lise de Cliente Espec√≠fico

```mermaid
sequenceDiagram
    participant U as User
    participant R as Root Agent
    participant D as Data Agent
    participant C as Cluster Agent
    participant Dec as Decision Agent
    
    U->>R: "Analyze customer ACME Corp"
    R->>D: Get ACME Corp data
    D-->>R: Customer profile
    
    R->>C: Identify customer cluster
    C-->>R: Cluster assignment + similarity
    
    R->>Dec: Generate recommendations
    Dec-->>R: Personalized strategy
    
    R-->>U: Customer-specific insights
```

## üí° Exemplos de Uso Avan√ßado

### 1. An√°lise Estrat√©gica Completa

```python
async def strategic_analysis():
    query = """
    Execute uma an√°lise estrat√©gica completa dos nossos clientes B2B:
    
    1. Identifique 5-7 clusters principais usando m√∫ltiplos algoritmos
    2. Para cada cluster, analise:
       - Perfil demogr√°fico e comportamental
       - M√©tricas de neg√≥cio (MRR, LTV, Churn Risk)
       - Posicionamento competitivo
       
    3. Gere estrat√©gias espec√≠ficas incluindo:
       - Go-to-market personalizado
       - Pricing strategy otimizado
       - Product roadmap recommendations
       - Channel strategy
       
    4. Projete ROI para cada estrat√©gia em:
       - 6 meses (quick wins)
       - 12 meses (medium term)
       - 24 meses (strategic goals)
    
    5. Defina KPIs de acompanhamento e early warning indicators
    """
    
    result = await b2shift_root_agent.process_comprehensive_analysis(query)
    return result.strategic_plan
```

### 2. Otimiza√ß√£o de Portfolio

```python
async def portfolio_optimization():
    query = """
    Otimize nosso portfolio de produtos considerando:
    
    1. Performance atual por cluster de cliente
    2. Market fit de cada produto por segmento
    3. Oportunidades de cross-sell e upsell
    4. Gaps no portfolio vs necessidades dos clusters
    
    Recomende:
    - Produtos a descontinuar
    - Produtos a desenvolver
    - Bundling strategies
    - Pricing optimization
    
    Projete impacto financeiro das recomenda√ß√µes.
    """
    
    optimization = await b2shift_root_agent.optimize_portfolio(query)
    return optimization.recommendations
```

### 3. Predi√ß√£o e Preven√ß√£o de Churn

```python
async def churn_prevention_analysis():
    query = """
    Analise risco de churn por cluster e cliente:
    
    1. Identifique early warning signals por cluster
    2. Calcule churn probability para cada cliente
    3. Segmente clientes por risco (high/medium/low)
    4. Gere playbooks de reten√ß√£o espec√≠ficos
    5. Projete impacto financeiro das a√ß√µes preventivas
    
    Foque em clientes de alto valor com risco m√©dio-alto.
    """
    
    churn_analysis = await b2shift_root_agent.analyze_churn_risk(query)
    return churn_analysis.prevention_plan
```

## üîß Configura√ß√£o e Deployment

### Configura√ß√£o Local

```bash
# 1. Clone o reposit√≥rio
cd AIAgentic/b2shift-cluster-agent-adk/b2shift-cluster-agent

# 2. Instalar depend√™ncias
poetry install

# 3. Configurar vari√°veis de ambiente
cp .env.example .env
# Editar .env com suas credenciais GCP
```

### Vari√°veis de Ambiente

```env
# Google Cloud Configuration
GOOGLE_CLOUD_PROJECT=seu-projeto-gcp
GOOGLE_CLOUD_LOCATION=us-central1
GOOGLE_APPLICATION_CREDENTIALS=path/to/service-account.json

# BigQuery Configuration  
BQ_PROJECT_ID=seu-projeto-bigquery
BQ_DATASET_ID=b2bshift_customer_data

# Model Configuration
ROOT_AGENT_MODEL=gemini-1.5-pro
DATA_AGENT_MODEL=gemini-1.5-flash
CLUSTER_AGENT_MODEL=gemini-1.5-flash
DECISION_AGENT_MODEL=gemini-1.5-pro

# B2Shift Specific Settings
B2SHIFT_MIN_CLUSTER_SIZE=50
B2SHIFT_MAX_CLUSTERS=10
B2SHIFT_CONFIDENCE_THRESHOLD=0.8
```

### Deploy no Vertex AI

```bash
# Deploy usando ADK
poetry run adk deploy --create --resource_name="b2shift-agent"

# Testar deployment
poetry run python deployment/test_deployment.py
```

### Comandos de Desenvolvimento

```bash
# Executar todos os testes
make test

# Demo interativa
make demo

# Executar CLI interativa
make run-cli

# An√°lise r√°pida
make demo-quick

# Validar configura√ß√£o
make validate

# Limpar cache e logs
make clean
```

## üìä Monitoramento e Observabilidade

### M√©tricas de Performance

| Categoria | M√©trica | Threshold | Alertas |
|-----------|---------|-----------|---------|
| **Latency** | Agent response time | < 30s | Slack + PagerDuty |
| **Quality** | Silhouette score | > 0.5 | Email |
| **Business** | Strategy adoption rate | > 70% | Dashboard |
| **Cost** | Monthly GCP spend | < $5000 | Email + Slack |

### Logs e Debugging

```python
# Logs estruturados para cada agent
import structlog

logger = structlog.get_logger()

async def process_query(self, query: str):
    logger.info(
        "agent_execution_start",
        agent=self.name,
        query_hash=hash(query),
        timestamp=datetime.now()
    )
    
    try:
        result = await self._execute(query)
        logger.info(
            "agent_execution_success", 
            agent=self.name,
            execution_time=time.time() - start_time,
            result_size=len(str(result))
        )
        return result
        
    except Exception as e:
        logger.error(
            "agent_execution_error",
            agent=self.name, 
            error=str(e),
            stack_trace=traceback.format_exc()
        )
        raise
```

### Dashboard de Monitoramento

Acesse em tempo real:
- **Agent Performance**: Response times, success rates
- **Cluster Quality**: M√©tricas de ML por execu√ß√£o
- **Business Impact**: ROI realizados vs projetados
- **System Health**: Recursos GCP, custos, uptime

## üîí Seguran√ßa e Compliance

### Controles de Acesso

```python
# Role-based access control
ROLES = {
    "data_scientist": ["view_clusters", "run_analysis"],
    "business_analyst": ["view_strategies", "export_reports"],
    "admin": ["all_permissions"],
    "readonly": ["view_dashboards"]
}

@require_role("data_scientist")
async def run_clustering_analysis(query: str):
    # S√≥ data scientists podem executar an√°lises
    pass
```

### Auditoria e Compliance

- **Audit Trail**: Todas as execu√ß√µes s√£o logadas
- **Data Lineage**: Rastreamento de origem dos dados
- **LGPD Compliance**: Anonimiza√ß√£o de PII
- **Model Versioning**: Controle de vers√µes dos modelos

### Prote√ß√£o contra Prompt Injection

```python
def sanitize_prompt(user_input: str) -> str:
    """
    Sanitiza input do usu√°rio para prevenir prompt injection
    """
    # Remove comandos suspeitos
    blocked_patterns = [
        r"ignore previous instructions",
        r"system:",
        r"<\|.*?\|>",
        r"___",
    ]
    
    for pattern in blocked_patterns:
        user_input = re.sub(pattern, "", user_input, flags=re.IGNORECASE)
    
    return user_input[:1000]  # Limite de tamanho
```

## üöÄ Pr√≥ximos Passos

### Roadmap T√©cnico

#### Q1 2024
- [ ] **API REST**: Endpoints para integra√ß√£o externa
- [ ] **Batch Processing**: An√°lises agendadas em lote
- [ ] **Model Optimization**: Hyperparameter tuning autom√°tico
- [ ] **Advanced Visualizations**: Interactive dashboards

#### Q2 2024  
- [ ] **Real-time Clustering**: Streaming analysis com Pub/Sub
- [ ] **AutoML Integration**: Vertex AutoML para otimiza√ß√£o
- [ ] **Multi-language Support**: Agents em portugu√™s nativo
- [ ] **Advanced Security**: Zero-trust architecture

### Funcionalidades Futuras

1. **Federated Learning**: ML distribu√≠do entre clientes
2. **Explainable AI**: Modelos interpret√°veis 
3. **Edge Deployment**: Agentes rodando on-premises
4. **Quantum-ready**: Prepara√ß√£o para quantum computing

---

## üìû Suporte T√©cnico

Para quest√µes espec√≠ficas do sistema AI Agentic:

- **üîß Issues T√©cnicas**: GitHub Issues
- **üí¨ Discuss√µes**: GitHub Discussions  
- **üìß Suporte Enterprise**: ai-support@b2shift.com
- **üìö Documenta√ß√£o**: [Wiki T√©cnico](./docs/)

---

*Sistema desenvolvido com ‚ù§Ô∏è usando Google Agent Development Kit*
